// Code generated by mockery v2.33.3. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// MockBillingService is an autogenerated mock type for the BillingService type
type MockBillingService struct {
	mock.Mock
}

type MockBillingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillingService) EXPECT() *MockBillingService_Expecter {
	return &MockBillingService_Expecter{mock: &_m.Mock}
}

// GetOutstanding provides a mock function with given fields: ctx, loanId
func (_m *MockBillingService) GetOutstanding(ctx context.Context, loanId uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, loanId)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (float64, error)); ok {
		return rf(ctx, loanId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, loanId)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingService_GetOutstanding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutstanding'
type MockBillingService_GetOutstanding_Call struct {
	*mock.Call
}

// GetOutstanding is a helper method to define mock.On call
//   - ctx context.Context
//   - loanId uuid.UUID
func (_e *MockBillingService_Expecter) GetOutstanding(ctx interface{}, loanId interface{}) *MockBillingService_GetOutstanding_Call {
	return &MockBillingService_GetOutstanding_Call{Call: _e.mock.On("GetOutstanding", ctx, loanId)}
}

func (_c *MockBillingService_GetOutstanding_Call) Run(run func(ctx context.Context, loanId uuid.UUID)) *MockBillingService_GetOutstanding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBillingService_GetOutstanding_Call) Return(outstandingAmount float64, err error) *MockBillingService_GetOutstanding_Call {
	_c.Call.Return(outstandingAmount, err)
	return _c
}

func (_c *MockBillingService_GetOutstanding_Call) RunAndReturn(run func(context.Context, uuid.UUID) (float64, error)) *MockBillingService_GetOutstanding_Call {
	_c.Call.Return(run)
	return _c
}

// IsDelinquent provides a mock function with given fields: ctx, loanId
func (_m *MockBillingService) IsDelinquent(ctx context.Context, loanId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, loanId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, loanId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, loanId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, loanId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillingService_IsDelinquent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDelinquent'
type MockBillingService_IsDelinquent_Call struct {
	*mock.Call
}

// IsDelinquent is a helper method to define mock.On call
//   - ctx context.Context
//   - loanId uuid.UUID
func (_e *MockBillingService_Expecter) IsDelinquent(ctx interface{}, loanId interface{}) *MockBillingService_IsDelinquent_Call {
	return &MockBillingService_IsDelinquent_Call{Call: _e.mock.On("IsDelinquent", ctx, loanId)}
}

func (_c *MockBillingService_IsDelinquent_Call) Run(run func(ctx context.Context, loanId uuid.UUID)) *MockBillingService_IsDelinquent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBillingService_IsDelinquent_Call) Return(isDelinquent bool, err error) *MockBillingService_IsDelinquent_Call {
	_c.Call.Return(isDelinquent, err)
	return _c
}

func (_c *MockBillingService_IsDelinquent_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MockBillingService_IsDelinquent_Call {
	_c.Call.Return(run)
	return _c
}

// MakePayment provides a mock function with given fields: ctx, loanId, paymentAmount, paymentDt
func (_m *MockBillingService) MakePayment(ctx context.Context, loanId uuid.UUID, paymentAmount float64, paymentDt *time.Time) error {
	ret := _m.Called(ctx, loanId, paymentAmount, paymentDt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, float64, *time.Time) error); ok {
		r0 = rf(ctx, loanId, paymentAmount, paymentDt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBillingService_MakePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakePayment'
type MockBillingService_MakePayment_Call struct {
	*mock.Call
}

// MakePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - loanId uuid.UUID
//   - paymentAmount float64
//   - paymentDt *time.Time
func (_e *MockBillingService_Expecter) MakePayment(ctx interface{}, loanId interface{}, paymentAmount interface{}, paymentDt interface{}) *MockBillingService_MakePayment_Call {
	return &MockBillingService_MakePayment_Call{Call: _e.mock.On("MakePayment", ctx, loanId, paymentAmount, paymentDt)}
}

func (_c *MockBillingService_MakePayment_Call) Run(run func(ctx context.Context, loanId uuid.UUID, paymentAmount float64, paymentDt *time.Time)) *MockBillingService_MakePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(float64), args[3].(*time.Time))
	})
	return _c
}

func (_c *MockBillingService_MakePayment_Call) Return(err error) *MockBillingService_MakePayment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBillingService_MakePayment_Call) RunAndReturn(run func(context.Context, uuid.UUID, float64, *time.Time) error) *MockBillingService_MakePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillingService creates a new instance of MockBillingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillingService {
	mock := &MockBillingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
