// Code generated by mockery v2.33.3. DO NOT EDIT.

package v1

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockBillingRestController is an autogenerated mock type for the BillingRestController type
type MockBillingRestController struct {
	mock.Mock
}

type MockBillingRestController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillingRestController) EXPECT() *MockBillingRestController_Expecter {
	return &MockBillingRestController_Expecter{mock: &_m.Mock}
}

// GetOutstanding provides a mock function with given fields: c
func (_m *MockBillingRestController) GetOutstanding(c *gin.Context) {
	_m.Called(c)
}

// MockBillingRestController_GetOutstanding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutstanding'
type MockBillingRestController_GetOutstanding_Call struct {
	*mock.Call
}

// GetOutstanding is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockBillingRestController_Expecter) GetOutstanding(c interface{}) *MockBillingRestController_GetOutstanding_Call {
	return &MockBillingRestController_GetOutstanding_Call{Call: _e.mock.On("GetOutstanding", c)}
}

func (_c *MockBillingRestController_GetOutstanding_Call) Run(run func(c *gin.Context)) *MockBillingRestController_GetOutstanding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBillingRestController_GetOutstanding_Call) Return() *MockBillingRestController_GetOutstanding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBillingRestController_GetOutstanding_Call) RunAndReturn(run func(*gin.Context)) *MockBillingRestController_GetOutstanding_Call {
	_c.Call.Return(run)
	return _c
}

// IsDelinquent provides a mock function with given fields: c
func (_m *MockBillingRestController) IsDelinquent(c *gin.Context) {
	_m.Called(c)
}

// MockBillingRestController_IsDelinquent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDelinquent'
type MockBillingRestController_IsDelinquent_Call struct {
	*mock.Call
}

// IsDelinquent is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockBillingRestController_Expecter) IsDelinquent(c interface{}) *MockBillingRestController_IsDelinquent_Call {
	return &MockBillingRestController_IsDelinquent_Call{Call: _e.mock.On("IsDelinquent", c)}
}

func (_c *MockBillingRestController_IsDelinquent_Call) Run(run func(c *gin.Context)) *MockBillingRestController_IsDelinquent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBillingRestController_IsDelinquent_Call) Return() *MockBillingRestController_IsDelinquent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBillingRestController_IsDelinquent_Call) RunAndReturn(run func(*gin.Context)) *MockBillingRestController_IsDelinquent_Call {
	_c.Call.Return(run)
	return _c
}

// MakePayment provides a mock function with given fields: c
func (_m *MockBillingRestController) MakePayment(c *gin.Context) {
	_m.Called(c)
}

// MockBillingRestController_MakePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakePayment'
type MockBillingRestController_MakePayment_Call struct {
	*mock.Call
}

// MakePayment is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockBillingRestController_Expecter) MakePayment(c interface{}) *MockBillingRestController_MakePayment_Call {
	return &MockBillingRestController_MakePayment_Call{Call: _e.mock.On("MakePayment", c)}
}

func (_c *MockBillingRestController_MakePayment_Call) Run(run func(c *gin.Context)) *MockBillingRestController_MakePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBillingRestController_MakePayment_Call) Return() *MockBillingRestController_MakePayment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBillingRestController_MakePayment_Call) RunAndReturn(run func(*gin.Context)) *MockBillingRestController_MakePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillingRestController creates a new instance of MockBillingRestController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillingRestController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillingRestController {
	mock := &MockBillingRestController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
